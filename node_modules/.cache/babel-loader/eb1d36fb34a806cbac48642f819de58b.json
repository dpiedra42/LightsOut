{"ast":null,"code":"import _slicedToArray from \"/Users/deannapiedra/Documents/42/LightsOut/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/deannapiedra/Documents/42/LightsOut/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/deannapiedra/Documents/42/LightsOut/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/deannapiedra/Documents/42/LightsOut/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/deannapiedra/Documents/42/LightsOut/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/deannapiedra/Documents/42/LightsOut/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/deannapiedra/Documents/42/LightsOut/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    // Creates an array of arrays that have values true or false for each row.\n    // These values determine which cells are on and off. y=rows, x=columns\n    value: function createBoard() {\n      var board = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          // If random is less than 0.25 the light will start on, pushes true of false\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1]; // Number converts string->number\n      // Going through every row and every cell to return true if everything is false\n\n\n      var hasWon = board.every(function (row) {\n        return row.every(function (cell) {\n          return !cell;\n        });\n      });\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it by making it opposite of itself\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      flipCell(y, x); // flips the cell you clicked\n\n      flipCell(y, x - 1); // flips the cell to the left\n\n      flipCell(y, x + 1); // flips the cell to the right\n\n      flipCell(y - 1, x); // flips the cell below\n\n      flipCell(y + 1, x); // flips the cell above\n\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.hasWon) return /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 14\n        }\n      }, \"YOU WON!\"); // Creating a new array to create a <Cell> and send in a isLit value\n\n      var tblboard = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        var _loop = function _loop(x) {\n          var coord = \"\".concat(y, \"-\").concat(x);\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: coord,\n            isLit: _this2.state.board[y][x],\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(coord);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 18\n            }\n          })); // () doesnt call the function right away. only when handleclick is called\n        };\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          _loop(x);\n        }\n\n        tblboard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: y,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 21\n          }\n        }, row));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"title-board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"neon-orange\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }\n      }, \"Lights\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"neon-blue\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }\n      }, \"Out\")), /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }\n      }, tblboard)));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/Users/deannapiedra/Documents/42/LightsOut/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","every","cell","flipCell","setState","tblboard","flipCellsAround","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  };\n\n  // Creates an array of arrays that have values true or false for each row.\n  // These values determine which cells are on and off. y=rows, x=columns\n  createBoard() {\n    let board = [];\n    for (let y = 0; y < this.props.nrows; y++)\n    {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++)\n      {\n        // If random is less than 0.25 the light will start on, pushes true of false\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number); // Number converts string->number\n    // Going through every row and every cell to return true if everything is false\n    let hasWon = board.every(row => row.every(cell => !cell));\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it by making it opposite of itself\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    flipCell(y, x); // flips the cell you clicked\n    flipCell(y, x - 1); // flips the cell to the left\n    flipCell(y, x + 1); // flips the cell to the right\n    flipCell(y - 1, x); // flips the cell below\n    flipCell(y + 1, x); // flips the cell above\n    this.setState({board, hasWon});\n  }\n\n  render() {\n    if (this.state.hasWon)\n      return <h1>YOU WON!</h1>\n\n    // Creating a new array to create a <Cell> and send in a isLit value\n    let tblboard = [];\n\n    for (let y = 0; y < this.props.nrows; y++)\n    {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++)\n      {\n        let coord = `${y}-${x}`;\n        row.push(<Cell key={coord} isLit={this.state.board[y][x]} \n        flipCellsAroundMe={() => this.flipCellsAround(coord)} />); // () doesnt call the function right away. only when handleclick is called\n      }\n      tblboard.push(<tr key={y}>{row}</tr>);\n    }\n\n    return(\n      <div>\n        <div className=\"title-board\">\n          <div className=\"neon-orange\">Lights</div>\n          <div className=\"neon-blue\">Out</div>\n        </div>\n        <table className=\"Board\">\n          <tbody>{tblboard}</tbody>\n        </table>\n      </div>\n    );\n  };\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}