{"ast":null,"code":"import _slicedToArray from \"/Users/deannapiedra/Documents/42/LightsOut/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/deannapiedra/Documents/42/LightsOut/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/deannapiedra/Documents/42/LightsOut/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/deannapiedra/Documents/42/LightsOut/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/deannapiedra/Documents/42/LightsOut/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/deannapiedra/Documents/42/LightsOut/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/deannapiedra/Documents/42/LightsOut/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css'; //  * - board: array-of-arrays of true/false\n//  *\n//  *    For this board:\n//  *       .  .  .\n//  *       O  O  .     (where . is off, and O is on)\n//  *       .  .  .\n//  *\n//  *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n//  *\n//  *  This should render an HTML table of individual <Cell /> components.\n//  *\n//  *  This doesn't handle any clicks --- clicks are on individual cells\n//  *\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  } // * Creates an array of arrays that have values true or false. these values determine\n  // * which cells are on and off. y=rows, x=columns\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          // * If random is less than 0.25 the light will start on, pushes true of false\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({board, hasWon});\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var tblboard = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            isLit: this.state.board[y][x],\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 18\n            }\n          }));\n        }\n\n        tblboard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 21\n          }\n        }, row));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }\n      }, \"Lights Out!\"), /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }\n      }, tblboard))); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/Users/deannapiedra/Documents/42/LightsOut/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","tblboard","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n//  * - board: array-of-arrays of true/false\n//  *\n//  *    For this board:\n//  *       .  .  .\n//  *       O  O  .     (where . is off, and O is on)\n//  *       .  .  .\n//  *\n//  *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n//  *\n//  *  This should render an HTML table of individual <Cell /> components.\n//  *\n//  *  This doesn't handle any clicks --- clicks are on individual cells\n//  *\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n\n  // * Creates an array of arrays that have values true or false. these values determine\n  // * which cells are on and off. y=rows, x=columns\n  createBoard() {\n    let board = [];\n    for (let y = 0; y < this.props.nrows; y++)\n    {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++)\n      {\n        // * If random is less than 0.25 the light will start on, pushes true of false\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    let tblboard = [];\n    for (let y = 0; y < this.props.nrows; y++)\n    {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++)\n      {\n        row.push(<Cell isLit={this.state.board[y][x]} />)\n      }\n      tblboard.push(<tr>{row}</tr>);\n    }\n    return(\n      <div>\n        <h1>Lights Out!</h1>\n        <table className=\"Board\">\n          <tbody>\n            {tblboard}\n          </tbody>\n        </table>\n      </div>\n    );\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}